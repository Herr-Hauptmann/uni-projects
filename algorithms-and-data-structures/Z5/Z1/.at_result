{
    "buildhost_description": {
        "id": "lab002c28",
        "os": "Linux 2.6.32-754.2.1.el6.x86_64 x86_64\n\"CentOS release 6.10 (Final)\"\n",
        "compiler_version": "g++ (GCC) 6.2.0",
        "debugger_version": "GNU gdb (GDB) 7.12",
        "profiler_version": "valgrind-3.12.0"
    },
    "status": 4,
    "compile_result": {
        "status": 1,
        "output": "main.cpp: In member function ‘unsigned int HashMapaLan<TipKljuca, TipVrijednosti>::definisiHashFunkciju(unsigned int (*)(TipKljuca, unsigned int))’:\nmain.cpp:50:5: warning: no return statement in function returning non-void [-Wreturn-type]\n     }\n     ^\nmain.cpp: In instantiation of ‘Cvor<TipOznake>::Cvor(UsmjereniGraf<TipOznake>*, int) [with TipOznake = bool]’:\nmain.cpp:314:16:   required from ‘Cvor<TipOznake> UsmjereniGraf<TipOznake>::dajCvor(int) [with TipOznake = bool]’\nmain.cpp:276:37:   required from ‘Cvor<TipOznake> Grana<TipOznake>::dajPolazniCvor() const [with TipOznake = bool]’\nmain.cpp:503:50:   required from here\nmain.cpp:233:31: warning: ‘Cvor<bool>::graf’ will be initialized after [-Wreorder]\n     UsmjereniGraf<TipOznake>* graf;\n                               ^~~~\nmain.cpp:232:9: warning:   ‘int Cvor<bool>::redniBroj’ [-Wreorder]\n     int redniBroj;\n         ^~~~~~~~~\nmain.cpp:235:5: warning:   when initialized here [-Wreorder]\n     Cvor(UsmjereniGraf<TipOznake>* graf, int redniBroj): graf(graf), redniBroj(redniBroj) {}\n     ^~~~",
        "parsed_output": [
            {
                "type": "warning",
                "file": "main.cpp",
                "line": "50",
                "col": "5",
                "message": "no return statement in function returning non-void",
                "output": "/tmp/buildservice/bs_9338/main.cpp:50:5: warning: no return statement in function returning non-void [-Wreturn-type]     }     ^/tmp/buildservice/bs_9338/main.cpp: In instantiation of ‘Cvor<TipOznake>::Cvor(UsmjereniGraf<TipOznake>*, int) [with TipOznake = bool]’:/tmp/buildservice/bs_9338/main.cpp:314:16:   required from ‘Cvor<TipOznake> UsmjereniGraf<TipOznake>::dajCvor(int) [with TipOznake = bool]’/tmp/buildservice/bs_9338/main.cpp:276:37:   required from ‘Cvor<TipOznake> Grana<TipOznake>::dajPolazniCvor() const [with TipOznake = bool]’/tmp/buildservice/bs_9338/main.cpp:503:50:   required from here",
                "code": "}"
            },
            {
                "type": "warning",
                "file": "main.cpp",
                "line": "233",
                "col": "31",
                "message": "'Cvor<bool>::graf' will be initialized after",
                "output": "/tmp/buildservice/bs_9338/main.cpp:233:31: warning: ‘Cvor<bool>::graf’ will be initialized after [-Wreorder]     UsmjereniGraf<TipOznake>* graf;                               ^~~~",
                "code": "UsmjereniGraf<TipOznake>* graf;"
            },
            {
                "type": "warning",
                "file": "main.cpp",
                "line": "232",
                "col": "9",
                "message": "'int Cvor<bool>::redniBroj'",
                "output": "/tmp/buildservice/bs_9338/main.cpp:232:9: warning:   ‘int Cvor<bool>::redniBroj’ [-Wreorder]     int redniBroj;         ^~~~~~~~~",
                "code": "int redniBroj;"
            },
            {
                "type": "warning",
                "file": "main.cpp",
                "line": "235",
                "col": "5",
                "message": "when initialized here",
                "output": "/tmp/buildservice/bs_9338/main.cpp:235:5: warning:   when initialized here [-Wreorder]     Cvor(UsmjereniGraf<TipOznake>* graf, int redniBroj): graf(graf), redniBroj(redniBroj) {}     ^~~~",
                "code": "Cvor(UsmjereniGraf<TipOznake>* graf, int redniBroj): graf(graf), redniBroj(redniBroj) {}"
            }
        ]
    },
    "run_result": [],
    "debug_result": [],
    "profile_result": [],
    "test_results": {
        "1907": {
            "status": 1,
            "run_result": {
                "output": "2 Hrvatska '' '' 3 '' 0 '' ",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "1908": {
            "status": 1,
            "run_result": {
                "output": "2 2 2 BiH 2 BiH 1 '' 0 ''",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "1909": {
            "status": 1,
            "run_result": {
                "output": "3 Sarajevo Tuzla 4",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "1910": {
            "status": 1,
            "run_result": {
                "output": "2 300 0 2 400 3",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "1911": {
            "status": 1,
            "run_result": {
                "output": "",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2103": {
            "status": 1,
            "run_result": {
                "output": "100 100 300 400 500 0",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2104": {
            "status": 1,
            "run_result": {
                "output": "11001",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2105": {
            "status": 1,
            "run_result": {
                "output": "010000001100000110000101000000001000",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2106": {
            "status": 1,
            "run_result": {
                "output": "010000000100000110000100000000001000",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2107": {
            "status": 1,
            "run_result": {
                "output": "(0,1) -> 2.5; (1,2) -> 0.2; (1,3) -> 0.1; (3,3) -> -4; ",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2108": {
            "status": 1,
            "run_result": {
                "output": "(0,1) -> ''; (1,2) -> ''; (1,3) -> 'aa'; (3,3) -> ''; ",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2109": {
            "status": 1,
            "run_result": {
                "output": "(0) -> 'a'; (1) -> 'bcd'; (2) -> ''; (3) -> ''; ",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2110": {
            "status": 1,
            "run_result": {
                "output": "0; (0) -> '',''; (1) -> 'aaa','aaa'; (2) -> 'bbb','bbb'; (3) -> '',''; ",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2111": {
            "status": 1,
            "run_result": {
                "output": "(0,1) -> 'bb','bb'; (1,2) -> '',''; (1,3) -> '',''; (3,3) -> 'aa','aa'; ",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2112": {
            "status": 9,
            "run_result": {
                "output": "",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2113": {
            "status": 1,
            "run_result": {
                "output": "10",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2114": {
            "status": 3,
            "run_result": [],
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 2,
                "output": "bs_test_2114.cpp: In instantiation of ‘void dfs(UsmjereniGraf<TipOznake>*, std::vector<Cvor<TipOznake> >&, Cvor<TipOznake>) [with Tip = bool]’:\nbs_test_2114.cpp:532:39:   required from here\nbs_test_2114.cpp:478:20: error: ‘class Grana<bool>’ has no member named ‘daPolazniCvor’; did you mean ‘dajPolazniCvor’?\n         if((((*it).daPolazniCvor().dajRedniBroj() == cvor.dajRedniBroj()) && s.dajOznaku() != 1 )) dfs(graf,dfsobilazak,s);\n              ~~~~~~^~~~~~~~~~~~~",
                "parsed_output": [
                    {
                        "type": "error",
                        "file": "main.cpp",
                        "line": 472,
                        "col": "20",
                        "message": "'class Grana<bool>' has no member named 'daPolazniCvor'; did you mean 'dajPolazniCvor'?",
                        "output": "/tmp/buildservice/bs_9338/bs_test_2114.cpp:478:20: error: ‘class Grana<bool>’ has no member named ‘daPolazniCvor’; did you mean ‘dajPolazniCvor’?         if((((*it).daPolazniCvor().dajRedniBroj() == cvor.dajRedniBroj()) && s.dajOznaku() != 1 )) dfs(graf,dfsobilazak,s);              ~~~~~~^~~~~~~~~~~~~",
                        "code": "if((((*it).daPolazniCvor().dajRedniBroj() == cvor.dajRedniBroj()) && s.dajOznaku() != 1 )) dfs(graf,dfsobilazak,s);"
                    }
                ]
            }
        },
        "2115": {
            "status": 5,
            "run_result": {
                "output": "",
                "duration": 0,
                "status": 3,
                "core": "/tmp/buildservice/bs_9338/core.13100"
            },
            "debug_result": {
                "output": "[New LWP 13100]\nCore was generated by `bs_test_2115'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x0000000000401507 in std::_Bit_reference::operator bool (this=0x7ffd59101fe0) at /opt/gcc-6.2.0/include/c++/6.2.0/bits/stl_bvector.h:81\n81\t    { return !!(*_M_p & _M_mask); }\nTo enable execution of this file add\n\tadd-auto-load-safe-path /opt/gcc-6.2.0/lib64/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path /\nline to your configuration file \"$HOME/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  0x0000000000401507 in std::_Bit_reference::operator bool (this=0x7ffd59101fe0) at /opt/gcc-6.2.0/include/c++/6.2.0/bits/stl_bvector.h:81\n#1  0x00000000004019eb in std::_Bit_const_iterator::operator* (this=0x7ffd59102010) at /opt/gcc-6.2.0/include/c++/6.2.0/bits/stl_bvector.h:321\n#2  0x0000000000407304 in std::vector<bool, std::allocator<bool> >::operator[] (this=0x235ac40, __n=18446744073709551615) at /opt/gcc-6.2.0/include/c++/6.2.0/bits/stl_bvector.h:864\n#3  0x0000000000406ba0 in ListaGraf<bool>::dajOznakuCvora (this=0x235ac20, cvor=-1) at bs_test_2115.cpp:448\n#4  0x0000000000402d07 in Cvor<bool>::dajOznaku (this=0x7ffd59102090) at bs_test_2115.cpp:244\n#5  0x00000000004022ce in bfs<bool> (graf=0x235ac20, bfsobilazak=..., cvor=...) at bs_test_2115.cpp:492\n#6  0x000000000040135d in main () at bs_test_2115.cpp:532",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 442
                    }
                ]
            },
            "profile_result": {
                "output": "==13112== Memcheck, a memory error detector\n==13112== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==13112== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==13112== Command: bs_test_2115\n==13112== Parent PID: 13111\n==13112== \n==13112== Invalid read of size 8\n==13112==    at 0x401507: std::_Bit_reference::operator bool() const (stl_bvector.h:81)\n==13112==    by 0x4019EA: std::_Bit_const_iterator::operator*() const (stl_bvector.h:321)\n==13112==    by 0x407303: std::vector<bool, std::allocator<bool> >::operator[](unsigned long) const (stl_bvector.h:864)\n==13112==    by 0x406B9F: ListaGraf<bool>::dajOznakuCvora(int) const (bs_test_2115.cpp:448)\n==13112==    by 0x402D06: Cvor<bool>::dajOznaku() const (bs_test_2115.cpp:244)\n==13112==    by 0x4022CD: void bfs<bool>(UsmjereniGraf<bool>*, std::vector<Cvor<bool>, std::allocator<Cvor<bool> > >&, Cvor<bool>) (bs_test_2115.cpp:492)\n==13112==    by 0x40135C: main (bs_test_2115.cpp:532)\n==13112==  Address 0x20000000051efdd8 is not stack'd, malloc'd or (recently) free'd\n==13112== \n==13112== \n==13112== Process terminating with default action of signal 11 (SIGSEGV)\n==13112==  General Protection Fault\n==13112==    at 0x401507: std::_Bit_reference::operator bool() const (stl_bvector.h:81)\n==13112==    by 0x4019EA: std::_Bit_const_iterator::operator*() const (stl_bvector.h:321)\n==13112==    by 0x407303: std::vector<bool, std::allocator<bool> >::operator[](unsigned long) const (stl_bvector.h:864)\n==13112==    by 0x406B9F: ListaGraf<bool>::dajOznakuCvora(int) const (bs_test_2115.cpp:448)\n==13112==    by 0x402D06: Cvor<bool>::dajOznaku() const (bs_test_2115.cpp:244)\n==13112==    by 0x4022CD: void bfs<bool>(UsmjereniGraf<bool>*, std::vector<Cvor<bool>, std::allocator<Cvor<bool> > >&, Cvor<bool>) (bs_test_2115.cpp:492)\n==13112==    by 0x40135C: main (bs_test_2115.cpp:532)\n==13112== \n==13112== HEAP SUMMARY:\n==13112==     in use at exit: 1,040 bytes in 13 blocks\n==13112==   total heap usage: 16 allocs, 3 frees, 74,320 bytes allocated\n==13112== \n==13112== LEAK SUMMARY:\n==13112==    definitely lost: 0 bytes in 0 blocks\n==13112==    indirectly lost: 0 bytes in 0 blocks\n==13112==      possibly lost: 0 bytes in 0 blocks\n==13112==    still reachable: 1,040 bytes in 13 blocks\n==13112==         suppressed: 0 bytes in 0 blocks\n==13112== Reachable blocks (those to which a pointer was found) are not shown.\n==13112== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==13112== \n==13112== For counts of detected and suppressed errors, rerun with: -v\n==13112== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 2,
                "parsed_output": [
                    {
                        "type": 2,
                        "output": " Invalid read of size 8\n    at 0x401507: std::_Bit_reference::operator bool() const (stl_bvector.h:81)\n    by 0x4019EA: std::_Bit_const_iterator::operator*() const (stl_bvector.h:321)\n    by 0x407303: std::vector<bool, std::allocator<bool> >::operator[](unsigned long) const (stl_bvector.h:864)\n    by 0x406B9F: ListaGraf<bool>::dajOznakuCvora(int) const (bs_test_2115.cpp:448)\n    by 0x402D06: Cvor<bool>::dajOznaku() const (bs_test_2115.cpp:244)\n    by 0x4022CD: void bfs<bool>(UsmjereniGraf<bool>*, std::vector<Cvor<bool>, std::allocator<Cvor<bool> > >&, Cvor<bool>) (bs_test_2115.cpp:492)\n    by 0x40135C: main (bs_test_2115.cpp:532)\n  Address 0x20000000051efdd8 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.cpp",
                        "line": 442
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "2116": {
            "status": 1,
            "run_result": {
                "output": "(0,1) -> 'bb','bb',3.5; (1,2) -> '','',1.2; (1,3) -> '','',0.1; (3,3) -> 'aa','aa',-4; ",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        }
    },
    "queue_items": 0,
    "time": 1579402605
}