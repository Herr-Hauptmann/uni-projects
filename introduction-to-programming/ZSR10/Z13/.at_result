{
    "buildhost_description": {
        "id": "lab002c28",
        "os": "Linux 2.6.32-754.2.1.el6.x86_64 x86_64\n\"CentOS release 6.10 (Final)\"\n",
        "compiler_version": "gcc (GCC) 6.2.0",
        "debugger_version": "GNU gdb (GDB) 7.12",
        "profiler_version": "valgrind-3.12.0"
    },
    "status": 4,
    "compile_result": {
        "status": 1,
        "output": "main.c: In function ‘izbaci_najcescu’:\nmain.c:18:45: warning: ‘index’ may be used uninitialized in this function [-Wmaybe-uninitialized]\n  int i = 0, br = 0, j = 0, k = 0 , max = 0, index;\n                                             ^~~~~",
        "parsed_output": [
            {
                "type": "warning",
                "file": "main.c",
                "line": "18",
                "col": "45",
                "message": "'index' may be used uninitialized in this function",
                "output": "/tmp/buildservice/bs_9740/main.c:18:45: warning: ‘index’ may be used uninitialized in this function [-Wmaybe-uninitialized]  int i = 0, br = 0, j = 0, k = 0 , max = 0, index;                                             ^~~~~",
                "code": "int i = 0, br = 0, j = 0, k = 0 , max = 0, index;"
            }
        ]
    },
    "run_result": [],
    "debug_result": [],
    "profile_result": [],
    "test_results": {
        "1562": {
            "status": 5,
            "run_result": {
                "output": "",
                "duration": 0,
                "status": 3,
                "core": "/tmp/buildservice/bs_9740/core.4453"
            },
            "debug_result": {
                "output": "[New LWP 4453]\nCore was generated by `bs_test_1562'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x00000000004008ec in izbaci_najcescu (s=0x7fff538086b0 \"\") at bs_test_1562.c:80\n80\t\tfor(i = 0; i < brojevi[index]; i++)\n#0  0x00000000004008ec in izbaci_najcescu (s=0x7fff538086b0 \"\") at bs_test_1562.c:80\n#1  0x00000000004009cd in main () at bs_test_1562.c:104",
                "parsed_output": [
                    {
                        "file": "main.c",
                        "line": 78
                    }
                ]
            },
            "profile_result": {
                "output": "==4465== Memcheck, a memory error detector\n==4465== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==4465== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==4465== Command: bs_test_1562\n==4465== Parent PID: 4464\n==4465== \n==4465== Use of uninitialised value of size 8\n==4465==    at 0x4008EC: izbaci_najcescu (bs_test_1562.c:80)\n==4465==    by 0x4009CC: main (bs_test_1562.c:104)\n==4465== \n==4465== Invalid read of size 4\n==4465==    at 0x4008EC: izbaci_najcescu (bs_test_1562.c:80)\n==4465==    by 0x4009CC: main (bs_test_1562.c:104)\n==4465==  Address 0x1000000eb0 is not stack'd, malloc'd or (recently) free'd\n==4465== \n==4465== \n==4465== Process terminating with default action of signal 11 (SIGSEGV)\n==4465==  Access not within mapped region at address 0x1000000EB0\n==4465==    at 0x4008EC: izbaci_najcescu (bs_test_1562.c:80)\n==4465==    by 0x4009CC: main (bs_test_1562.c:104)\n==4465==  If you believe this happened as a result of a stack\n==4465==  overflow in your program's main thread (unlikely but\n==4465==  possible), you can try to increase the size of the\n==4465==  main thread stack using the --main-stacksize= flag.\n==4465==  The main thread stack size used in this run was 10485760.\n==4465== \n==4465== HEAP SUMMARY:\n==4465==     in use at exit: 0 bytes in 0 blocks\n==4465==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==4465== \n==4465== All heap blocks were freed -- no leaks are possible\n==4465== \n==4465== For counts of detected and suppressed errors, rerun with: -v\n==4465== Use --track-origins=yes to see where uninitialised values come from\n==4465== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 4 from 4)\n",
                "status": 3,
                "parsed_output": [
                    {
                        "type": 3,
                        "output": " Use of uninitialised value of size 8\n    at 0x4008EC: izbaci_najcescu (bs_test_1562.c:80)\n    by 0x4009CC: main (bs_test_1562.c:104)\n",
                        "file": "main.c",
                        "line": 78
                    },
                    {
                        "type": 2,
                        "output": " Invalid read of size 4\n    at 0x4008EC: izbaci_najcescu (bs_test_1562.c:80)\n    by 0x4009CC: main (bs_test_1562.c:104)\n  Address 0x1000000eb0 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.c",
                        "line": 78
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "1563": {
            "status": 5,
            "run_result": {
                "output": "",
                "duration": 0,
                "status": 3,
                "core": "/tmp/buildservice/bs_9740/core.4483"
            },
            "debug_result": {
                "output": "[New LWP 4483]\nCore was generated by `bs_test_1563'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x00000000004008ec in izbaci_najcescu (s=0x7fff953695c1 \"\") at bs_test_1563.c:80\n80\t\tfor(i = 0; i < brojevi[index]; i++)\n#0  0x00000000004008ec in izbaci_najcescu (s=0x7fff953695c1 \"\") at bs_test_1563.c:80\n#1  0x00000000004009e1 in main () at bs_test_1563.c:104",
                "parsed_output": [
                    {
                        "file": "main.c",
                        "line": 78
                    }
                ]
            },
            "profile_result": {
                "output": "==4495== Memcheck, a memory error detector\n==4495== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==4495== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==4495== Command: bs_test_1563\n==4495== Parent PID: 4494\n==4495== \n==4495== Use of uninitialised value of size 8\n==4495==    at 0x4008EC: izbaci_najcescu (bs_test_1563.c:80)\n==4495==    by 0x4009E0: main (bs_test_1563.c:104)\n==4495== \n==4495== Invalid read of size 4\n==4495==    at 0x4008EC: izbaci_najcescu (bs_test_1563.c:80)\n==4495==    by 0x4009E0: main (bs_test_1563.c:104)\n==4495==  Address 0x1000000ee0 is not stack'd, malloc'd or (recently) free'd\n==4495== \n==4495== \n==4495== Process terminating with default action of signal 11 (SIGSEGV)\n==4495==  Access not within mapped region at address 0x1000000EE0\n==4495==    at 0x4008EC: izbaci_najcescu (bs_test_1563.c:80)\n==4495==    by 0x4009E0: main (bs_test_1563.c:104)\n==4495==  If you believe this happened as a result of a stack\n==4495==  overflow in your program's main thread (unlikely but\n==4495==  possible), you can try to increase the size of the\n==4495==  main thread stack using the --main-stacksize= flag.\n==4495==  The main thread stack size used in this run was 10485760.\n==4495== \n==4495== HEAP SUMMARY:\n==4495==     in use at exit: 0 bytes in 0 blocks\n==4495==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==4495== \n==4495== All heap blocks were freed -- no leaks are possible\n==4495== \n==4495== For counts of detected and suppressed errors, rerun with: -v\n==4495== Use --track-origins=yes to see where uninitialised values come from\n==4495== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 4 from 4)\n",
                "status": 3,
                "parsed_output": [
                    {
                        "type": 3,
                        "output": " Use of uninitialised value of size 8\n    at 0x4008EC: izbaci_najcescu (bs_test_1563.c:80)\n    by 0x4009E0: main (bs_test_1563.c:104)\n",
                        "file": "main.c",
                        "line": 78
                    },
                    {
                        "type": 2,
                        "output": " Invalid read of size 4\n    at 0x4008EC: izbaci_najcescu (bs_test_1563.c:80)\n    by 0x4009E0: main (bs_test_1563.c:104)\n  Address 0x1000000ee0 is not stack'd, malloc'd or (recently) free'd\n",
                        "file": "main.c",
                        "line": 78
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "1564": {
            "status": 6,
            "run_result": {
                "output": "JednaVeeeeeeeeeelikaRiiiiiiiiijec'JednaVeeeeeeeeeelikaRiiiiiiiiijec'",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "1565": {
            "status": 6,
            "run_result": {
                "output": "Ovo'Ovo je neki bezvezni tekst'",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": {
                "output": "==4536== Memcheck, a memory error detector\n==4536== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==4536== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==4536== Command: bs_test_1565\n==4536== Parent PID: 4535\n==4536== \n==4536== Conditional jump or move depends on uninitialised value(s)\n==4536==    at 0x4007F4: izbaci_najcescu (bs_test_1565.c:58)\n==4536==    by 0x4009F2: main (bs_test_1565.c:104)\n==4536== \n==4536== \n==4536== HEAP SUMMARY:\n==4536==     in use at exit: 0 bytes in 0 blocks\n==4536==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==4536== \n==4536== All heap blocks were freed -- no leaks are possible\n==4536== \n==4536== For counts of detected and suppressed errors, rerun with: -v\n==4536== Use --track-origins=yes to see where uninitialised values come from\n==4536== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 3,
                "parsed_output": [
                    {
                        "type": 3,
                        "output": " Conditional jump or move depends on uninitialised value(s)\n    at 0x4007F4: izbaci_najcescu (bs_test_1565.c:58)\n    by 0x4009F2: main (bs_test_1565.c:104)\n",
                        "file": "main.c",
                        "line": 56
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "1566": {
            "status": 6,
            "run_result": {
                "output": "stop' Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop'",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": {
                "output": "==4554== Memcheck, a memory error detector\n==4554== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==4554== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==4554== Command: bs_test_1566\n==4554== Parent PID: 4553\n==4554== \n==4554== Conditional jump or move depends on uninitialised value(s)\n==4554==    at 0x4007F4: izbaci_najcescu (bs_test_1566.c:58)\n==4554==    by 0x400A6D: main (bs_test_1566.c:104)\n==4554== \n==4554== \n==4554== HEAP SUMMARY:\n==4554==     in use at exit: 0 bytes in 0 blocks\n==4554==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==4554== \n==4554== All heap blocks were freed -- no leaks are possible\n==4554== \n==4554== For counts of detected and suppressed errors, rerun with: -v\n==4554== Use --track-origins=yes to see where uninitialised values come from\n==4554== ERROR SUMMARY: 67 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 3,
                "parsed_output": [
                    {
                        "type": 3,
                        "output": " Conditional jump or move depends on uninitialised value(s)\n    at 0x4007F4: izbaci_najcescu (bs_test_1566.c:58)\n    by 0x400A6D: main (bs_test_1566.c:104)\n",
                        "file": "main.c",
                        "line": 56
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "1567": {
            "status": 6,
            "run_result": {
                "output": "PsT'1PsT1 psT2 3Pst pstpst pst'",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": {
                "output": "==4572== Memcheck, a memory error detector\n==4572== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==4572== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==4572== Command: bs_test_1567\n==4572== Parent PID: 4571\n==4572== \n==4572== Conditional jump or move depends on uninitialised value(s)\n==4572==    at 0x4007F4: izbaci_najcescu (bs_test_1567.c:58)\n==4572==    by 0x4009F2: main (bs_test_1567.c:104)\n==4572== \n==4572== \n==4572== HEAP SUMMARY:\n==4572==     in use at exit: 0 bytes in 0 blocks\n==4572==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==4572== \n==4572== All heap blocks were freed -- no leaks are possible\n==4572== \n==4572== For counts of detected and suppressed errors, rerun with: -v\n==4572== Use --track-origins=yes to see where uninitialised values come from\n==4572== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 4 from 4)\n",
                "status": 3,
                "parsed_output": [
                    {
                        "type": 3,
                        "output": " Conditional jump or move depends on uninitialised value(s)\n    at 0x4007F4: izbaci_najcescu (bs_test_1567.c:58)\n    by 0x4009F2: main (bs_test_1567.c:104)\n",
                        "file": "main.c",
                        "line": 56
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "1638": {
            "status": 6,
            "run_result": {
                "output": "aa-a-a-a-a",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        },
        "1639": {
            "status": 6,
            "run_result": {
                "output": "pet'Pet plus pet plus pet daje petnaest'",
                "duration": 0,
                "status": 1
            },
            "debug_result": [],
            "profile_result": [],
            "compile_result": {
                "status": 1,
                "output": ""
            }
        }
    },
    "queue_items": 2,
    "time": 1551224845
}